fastlane_version("2.187.0")

default_platform(:ios)

platform :ios do
  desc "Sync certificates and provisioning profiles for all targets"
  lane :certificates do
    match(type: "appstore")
    match(type: "development", force_for_new_devices: true)
  end

  desc "Create screenshots in every language with every device"
  lane :create_screenshots do
    snapshot
  end

  desc "Upload screenshots to App Store Connect"
  lane :upload_screenshots do
    deliver(skip_binary_upload: true, skip_metadata: true, overwrite_screenshots: true, run_precheck_before_submit: false)
  end

  desc "Update metadata in App Store Connect"
  lane :update_metadata do
    deliver(skip_binary_upload: true, skip_screenshots: true, run_precheck_before_submit: false)
  end

  desc "Runs all the tests"
  lane :test do
    scan(open_report: true)
  end

  desc "Submit a new beta build to TestFlight"
  lane :beta do
    scan
    gym
    changelog = File.read("changelog.txt")
    pilot(changelog: changelog, distribute_external: true, groups: ["App Store Connect Users"])
    version = get_version_number(target: "Cryptomator")
    build = `git rev-list --count $(git rev-parse --abbrev-ref HEAD) | tr -d " \t\n\r"`
    slack(
      default_payloads: [], # reduce the notification to the minimum
      message: "Successfully submitted version #{version} (#{build}) to TestFlight :cryptomator:",
      payload: {
        "Changes" => changelog
      }
    )
  end

  desc "Deploy a new version to the App Store"
  lane :app_store do
    scan
    gym
    changelog = File.read("changelog.txt")
    deliver(skip_screenshots: true, submit_for_review: true, submission_information: { add_id_info_uses_idfa: false })
    version = get_version_number(target: "Cryptomator")
    build = `git rev-list --count $(git rev-parse --abbrev-ref HEAD) | tr -d " \t\n\r"`
    slack(
      default_payloads: [], # reduce the notification to the minimum
      message: "Successfully deployed version #{version} (#{build}) to the App Store :cryptomator:",
      payload: {
        "Changes" => changelog
      }
    )
  end

  error do |lane, exception|
    # slack(message: exception.to_s, success: false)
  end
end
