fastlane_version("2.222.0")

default_platform(:ios)

platform :ios do
  desc "Sync certificates and provisioning profiles for all targets"
  desc "Requires --env to be set to 'freemium' or 'premium'"
  lane :sync_certificates do
    ensure_env_vars(
      env_vars: ['BUNDLE_IDENTIFIER', 'SKYMATIC_MATCH_GIT_URL']
    )
    match(type: "appstore")
    match(type: "development", force_for_new_devices: true)
  end

  desc "Create screenshots in every language with every device"
  lane :create_screenshots do
    snapshot
  end

  desc "Upload screenshots to App Store Connect"
  desc "Requires --env to be set to 'freemium' or 'premium'"
  lane :upload_screenshots do
    ensure_env_vars(
      env_vars: ['BUNDLE_IDENTIFIER', 'METADATA_PATH']
    )
    deliver(skip_binary_upload: true, skip_metadata: true, overwrite_screenshots: true, run_precheck_before_submit: false)
  end

  desc "Update metadata in App Store Connect"
  desc "Requires --env to be set to 'freemium' or 'premium'"
  lane :update_metadata do
    ensure_env_vars(
      env_vars: ['BUNDLE_IDENTIFIER', 'METADATA_PATH']
    )
    deliver(skip_binary_upload: true, skip_screenshots: true, run_precheck_before_submit: false)
  end

  desc "Submit a new beta build to TestFlight"
  desc "Requires --env to be set to 'freemium' or 'premium'"
  lane :beta do
    ensure_env_vars(
      env_vars: ['APP_GROUP', 'APP_ICON_DARK_FILE_PATH', 'APP_ICON_LIGHT_FILE_PATH', 'APP_ICON_TINTED_FILE_PATH', 'BUNDLE_IDENTIFIER', 'DISPLAY_NAME', 'ENCRYPTION_EXPORT_COMPLIANCE_CODE', 'KEYCHAIN_GROUP', 'METADATA_PATH']
    )
    apply_config
    scan
    gym
    changelog = File.read("changelog.txt")
    pilot(changelog: changelog, distribute_external: true, groups: ["External Testers"])
    version = get_version_number(target: "Cryptomator")
    build = `git rev-list --count $(git rev-parse --abbrev-ref HEAD) | tr -d " \t\n\r"`
    slack(
      default_payloads: [], # reduce the notification to the minimum
      message: "Successfully submitted version #{version} (#{build}) to TestFlight :cryptomator:",
      payload: {
        "Changes" => changelog
      }
    )
  end

  desc "Deploy a new freemium and premium version to the App Store"
  lane :app_store do
    _app_store(env_file: ".env.premium")
    _app_store(env_file: ".env.freemium")
    changelog = File.read("changelog.txt")
    version = get_version_number(target: "Cryptomator")
    build = `git rev-list --count $(git rev-parse --abbrev-ref HEAD) | tr -d " \t\n\r"`
    slack(
      default_payloads: [], # reduce the notification to the minimum
      message: "Successfully deployed version #{version} (#{build}) to the App Store :cryptomator:",
      payload: {
        "Changes" => changelog
      }
    )
  end

  private_lane :_app_store do |options|
    Dotenv.overload(options[:env_file])
    ensure_env_vars(
      env_vars: ['APP_GROUP', 'APP_ICON_DARK_FILE_PATH', 'APP_ICON_LIGHT_FILE_PATH', 'APP_ICON_TINTED_FILE_PATH', 'BUNDLE_IDENTIFIER', 'DISPLAY_NAME', 'ENCRYPTION_EXPORT_COMPLIANCE_CODE', 'KEYCHAIN_GROUP', 'METADATA_PATH']
    )
    apply_config
    scan
    gym
    deliver(skip_screenshots: true, submit_for_review: true)
  end

  desc "Apply app configuration to release a different version"
  desc "Requires --env to be set to 'freemium' or 'premium'"
  lane :apply_config do
    ensure_env_vars(
      env_vars: ['APP_GROUP', 'APP_ICON_DARK_FILE_PATH', 'APP_ICON_LIGHT_FILE_PATH', 'APP_ICON_TINTED_FILE_PATH', 'BUNDLE_IDENTIFIER', 'CONFIG_NAME', 'DISPLAY_NAME', 'KEYCHAIN_GROUP']
    )
    config_name = ENV['CONFIG_NAME']
    bundle_identifier = ENV['BUNDLE_IDENTIFIER']
    display_name = ENV['DISPLAY_NAME']
    app_group = ENV['APP_GROUP']
    keychain_group = ENV['KEYCHAIN_GROUP']
    app_icon_light_file_path = ENV['APP_ICON_LIGHT_FILE_PATH']
    app_icon_dark_file_path = ENV['APP_ICON_DARK_FILE_PATH']
    app_icon_tinted_file_path = ENV['APP_ICON_TINTED_FILE_PATH']
    encryption_export_compliance_code = ENV['ENCRYPTION_EXPORT_COMPLIANCE_CODE']

    # Update the app identifier
    update_app_identifier(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "Cryptomator/Info.plist",
      app_identifier: bundle_identifier
    )
    update_app_identifier(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "FileProviderExtension/Info.plist",
      app_identifier: "#{bundle_identifier}.fileprovider"
    )
    update_app_identifier(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "FileProviderExtensionUI/Info.plist",
      app_identifier: "#{bundle_identifier}.fileprovider-ui"
    )
    update_app_identifier(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "CryptomatorIntents/Info.plist",
      app_identifier: "#{bundle_identifier}.intents"
    )
    update_app_identifier(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "CryptomatorTests/Info.plist",
      app_identifier: "#{bundle_identifier}.tests"
    )

    # Update the display name
    update_info_plist(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "Cryptomator/Info.plist",
      display_name: display_name
    )
    update_info_plist(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "FileProviderExtension/Info.plist",
      display_name: display_name
    )
    update_info_plist(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "FileProviderExtensionUI/Info.plist",
      display_name: display_name
    )

    update_info_plist(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "CryptomatorIntents/Info.plist",
      display_name: display_name
    )

    # Update the ITSEncryptionExportComplianceCode
    update_info_plist(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "Cryptomator/Info.plist",
      block: proc do |plist|
        plist["ITSEncryptionExportComplianceCode"] = encryption_export_compliance_code
      end
    )

    # Update the NSExtensionFileProviderDocumentGroup
    update_info_plist(
      xcodeproj: "Cryptomator.xcodeproj",
      plist_path: "FileProviderExtension/Info.plist",
      block: proc do |plist|
        plist["NSExtension"]["NSExtensionFileProviderDocumentGroup"] = app_group
      end
    )

    # Update the app group for the Cryptomator target
    update_app_group_identifiers(
      entitlements_file: "Cryptomator/Cryptomator.entitlements",
      app_group_identifiers: [app_group]
    )

    # Update the app group for the CryptomatorIntents target
    update_app_group_identifiers(
      entitlements_file: "CryptomatorIntents/CryptomatorIntents.entitlements",
      app_group_identifiers: [app_group]
    )

    # Update the app group for the FileProviderExtension target
    update_app_group_identifiers(
      entitlements_file: "FileProviderExtension/FileProviderExtension.entitlements",
      app_group_identifiers: [app_group]
    )

    # Update the app group for the FileProviderExtensionUI target
    update_app_group_identifiers(
      entitlements_file: "FileProviderExtensionUI/FileProviderExtensionUI.entitlements",
      app_group_identifiers: [app_group]
    )
    
    # Update the keychain sharing group for the Cryptomator target
    update_keychain_access_groups(
      entitlements_file: "Cryptomator/Cryptomator.entitlements",
      identifiers: ["$(AppIdentifierPrefix)#{keychain_group}"]
    )

    # Update the keychain sharing group for the FileProviderExtension target
    update_keychain_access_groups(
      entitlements_file: "FileProviderExtension/FileProviderExtension.entitlements",
      identifiers: ["$(AppIdentifierPrefix)#{keychain_group}"]
    )

    # Update the keychain sharing group for the FileProviderExtensionUI target
    update_keychain_access_groups(
      entitlements_file: "FileProviderExtensionUI/FileProviderExtensionUI.entitlements",
      identifiers: ["$(AppIdentifierPrefix)#{keychain_group}"]
    )

    # Update the project provisioning
    match(type: "development", readonly: true)
    match(type: "appstore", readonly: true)
    update_project_provisioning(
      xcodeproj: "Cryptomator.xcodeproj",
      profile: ENV["sigh_#{bundle_identifier}_development_profile-path"],
      target_filter: "^Cryptomator$",
      build_configuration: "Debug"
    )
    update_project_provisioning(
      xcodeproj: "Cryptomator.xcodeproj",
      profile: ENV["sigh_#{bundle_identifier}_appstore_profile-path"],
      target_filter: "^Cryptomator$",
      build_configuration: "Release"
    )
    update_project_provisioning(
      xcodeproj: "Cryptomator.xcodeproj",
      profile: ENV["sigh_#{bundle_identifier}.fileprovider_development_profile-path"],
      target_filter: "^FileProviderExtension$",
      build_configuration: "Debug"
    )
    update_project_provisioning(
      xcodeproj: "Cryptomator.xcodeproj",
      profile: ENV["sigh_#{bundle_identifier}.fileprovider_appstore_profile-path"],
      target_filter: "^FileProviderExtension$",
      build_configuration: "Release"
    )
    update_project_provisioning(
      xcodeproj: "Cryptomator.xcodeproj",
      profile: ENV["sigh_#{bundle_identifier}.fileprovider-ui_development_profile-path"],
      target_filter: "^FileProviderExtensionUI$",
      build_configuration: "Debug"
    )
    update_project_provisioning(
      xcodeproj: "Cryptomator.xcodeproj",
      profile: ENV["sigh_#{bundle_identifier}.fileprovider-ui_appstore_profile-path"],
      target_filter: "^FileProviderExtensionUI$",
      build_configuration: "Release"
    )
    update_project_provisioning(
      xcodeproj: "Cryptomator.xcodeproj",
      profile: ENV["sigh_#{bundle_identifier}.intents_development_profile-path"],
      target_filter: "^CryptomatorIntents$",
      build_configuration: "Debug"
    )
    update_project_provisioning(
      xcodeproj: "Cryptomator.xcodeproj",
      profile: ENV["sigh_#{bundle_identifier}.intents_appstore_profile-path"],
      target_filter: "^CryptomatorIntents$",
      build_configuration: "Release"
    )

    # Update the app constants file
    sh("./scripts/create-app-constants.sh #{bundle_identifier}")

    # Update the app icon
    sh("./scripts/create-app-icon.sh #{app_icon_light_file_path} #{app_icon_dark_file_path} #{app_icon_tinted_file_path}")

    # Update the cloud access secrets file
    sh("./scripts/create-cloud-access-secrets.sh #{config_name}")
  end

  error do |lane, exception|
    # slack(message: exception.to_s, success: false)
  end
end
